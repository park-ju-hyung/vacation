<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.vacation.mvc.mapper.EmployeeMapper">
	<!--등록-->
	<insert id="insertEmployee" parameterType="com.example.vacation.mvc.dto.EmployeeDTO">
		INSERT INTO employee ( empId, empName, empBirth, empNo, position, department, status, hireDate, email, empPassword )
		VALUES ( #{empId}, #{empName}, #{empBirth}, #{empNo}, #{position}, #{department}, #{status}, #{hireDate}, #{email}, #{empPassword} )
	</insert>

	<!--리스트-->
	<sql id="basicTable">
		SELECT ROW_NUMBER() OVER(order by hiredate) AS seq,
			   empId,
			   empName,
			   DATE_FORMAT(empBirth, '%Y-%m-%d') as empBirth,
			   empNo,
			   position,
			   department,
			   DATE_FORMAT(hireDate, '%Y-%m-%d') as hireDate,
			   status
		FROM employee
	</sql>

	<sql id="where">
		WHERE 1=1
		<if test="schDtStart != '' and schDtStart != null">
			AND DATE_FORMAT(hireDate, '%Y-%m-%d') <![CDATA[>=]]> #{schDtStart}
		</if>
		<if test="schDtEnd != '' and schDtEnd != null">
			AND DATE_FORMAT(hireDate, '%Y-%m-%d') <![CDATA[<=]]> #{schDtEnd}
		</if>
		<if test="empName != null and empName != ''">
			AND empName LIKE CONCAT('%', #{empName}, '%')
		</if>
		<if test="department != null and department != ''">
			AND department LIKE CONCAT('%', #{department}, '%')
		</if>
		<if test="position != null and position != ''">
			AND position LIKE CONCAT('%', #{position}, '%')
		</if>
	</sql>

	<select id="employeeCount" parameterType="com.example.vacation.mvc.dto.EmployeeDTO" resultType="integer">
		SELECT count(*) FROM employee
		<include refid="where"/>
	</select>

	<select id="employeelist" parameterType="com.example.vacation.mvc.dto.EmployeeDTO"
			resultType="com.example.vacation.mvc.vo.EmployeeVO">
		<include refid="basicTable"/>
		<include refid="where"/>
		ORDER BY seq DESC
		LIMIT #{pageSize} OFFSET #{pageOffset}
	</select>

	<!--상세보기-->
	<select id="employeeVO" parameterType="com.example.vacation.mvc.dto.EmployeeDTO"
			resultType="com.example.vacation.mvc.vo.EmployeeVO">
		SELECT
			empId,
			empName,
			DATE_FORMAT(empBirth, '%Y-%m-%d') as empBirth,
			empNo,
			position,
			email,
			department,
			DATE_FORMAT(hireDate, '%Y-%m-%d') as hireDate,
			status
		FROM employee
		WHERE empId = #{empId}
	</select>

	<!--수정하기-->
	<update id="employeeUpdate" parameterType="com.example.vacation.mvc.dto.EmployeeDTO">
		UPDATE employee
		SET empName=#{empName}
		, empBirth=#{empBirth}
		, position=#{position}
		, email=#{email}
		, department=#{department}
		, hireDate=#{hireDate}
		, status=#{status}
		WHERE empId= #{empId}
	</update>

	<!--휴직 퇴직시 날짜, 사유 등록-->
	<insert id="insertStatus" parameterType="com.example.vacation.mvc.dto.EmployeeStatusDTO">
		INSERT INTO employeestatus ( statusId, empName, empBirth, empNo, status, statusDate, statusReason)
		VALUES ( #{statusId}, #{empName}, #{empBirth}, #{empNo}, #{status}, #{statusDate}, #{statusReason})
	</insert>

	<!--휴직 퇴직시 날짜, 사유 list-->
	<sql id="statusTable">
		SELECT ROW_NUMBER() OVER (ORDER BY E.statusDate DESC) AS seq,
				S.empId, S.empName, S.empNo,
			   E.status, E.statusDate, E.statusReason
		FROM employee S JOIN employeestatus E ON S.empNo = E.empNo
		WHERE E.empNo = #{empNo}
	</sql>

	<select id="employeeStatusCount" parameterType="com.example.vacation.mvc.dto.EmployeeStatusDTO" resultType="integer">
		SELECT count(*) FROM employeestatus
	</select>

	<select id="employeeStatuslist" parameterType="com.example.vacation.mvc.dto.EmployeeStatusDTO"
			resultType="com.example.vacation.mvc.vo.EmployeeVO">
		<include refid="statusTable"/>
		ORDER BY seq DESC
		LIMIT #{pageSize} OFFSET #{pageOffset}
	</select>





</mapper>
